use rusqlite::{params, Connection, Error};
use std::{str::FromStr, sync::Mutex};

use crate::models::habit::{
    Habit, HabitEntry, HabitEntryValues, HabitType, HabitValues, HabitWithEntries,
};

pub struct HabitController {
    connection: Mutex<Connection>,
}

impl HabitController {
    pub fn new(connection: Mutex<Connection>) -> Self {
        Self { connection }
    }

    pub fn create_habit(&self, habit_values: &HabitValues) -> Result<Habit, Error> {
        let conn = self.connection.lock().unwrap();

        conn.execute(
            "INSERT INTO habits (name, type, target,
            is_positive, is_archived) VALUES (?1, ?2, COALESCE(?3, 1),
            COALESCE(?4, 1), COALESCE(?5, 0))",
            params![
                habit_values.name,
                habit_values.habit_type.to_string(),
                habit_values.target,
                habit_values.is_positive,
                habit_values.is_archived
            ],
        )?;

        let id = conn.last_insert_rowid();

        let data = conn.query_row("SELECT * FROM habits WHERE id = $1", [id], |row| {
            Ok(Habit {
                id,
                name: row.get("name")?,
                habit_type: habit_values.habit_type,
                target: row.get("target")?,
                is_positive: row.get("is_positive")?,
                is_archived: row.get("is_archived")?,
                creation_timestamp: row.get("creation_timestamp")?,
            })
        })?;

        Ok(data)
    }

    pub fn get_all_habits(&self) -> Result<Vec<Habit>, Error> {
        let conn = self.connection.lock().unwrap();

        let mut stmt = conn.prepare("SELECT * FROM habits")?;
        let habit_iter = stmt.query_map([], |row| {
            let type_str: String = row.get("type")?;
            let habit_type = match HabitType::from_str(type_str.as_str()) {
                Ok(habit_type) => habit_type,
                Err(_) => {
                    println!("Error while parsing habit type");
                    return Err(Error::InvalidQuery);
                }
            };

            Ok(Habit {
                id: row.get("id")?,
                name: row.get("name")?,
                habit_type,
                target: row.get("target")?,
                is_positive: row.get("is_positive")?,
                is_archived: row.get("is_archived")?,
                creation_timestamp: row.get("creation_timestamp")?,
            })
        })?;

        let mut habits = Vec::new();
        for habit in habit_iter {
            habits.push(habit?);
        }

        Ok(habits)
    }

    pub fn create_habit_entry(
        &self,
        habit_entry_values: &HabitEntryValues,
    ) -> Result<HabitEntry, Error> {
        let conn = self.connection.lock().unwrap();

        conn.execute(
            "INSERT INTO habit_entries (habit_id, value, completion_date) VALUES (?1, ?2, ?3)",
            params![
                &habit_entry_values.habit_id,
                &habit_entry_values.value,
                &habit_entry_values.completion_date
            ],
        )?;

        let id = conn.last_insert_rowid();
        let data = conn.query_row("SELECT * FROM habit_entries WHERE id = $1", [id], |row| {
            Ok(HabitEntry {
                id,
                habit_id: row.get("habit_id")?,
                value: row.get("value")?,
                completion_date: row.get("completion_date")?,
                creation_timestamp: row.get("creation_timestamp")?,
            })
        })?;

        Ok(data)
    }

    pub fn delete_habit_entry(&self, habit_entry_id: i64) -> Result<HabitEntry, Error> {
        let conn = self.connection.lock().unwrap();

        let habit_entry = conn.query_row(
            "SELECT * FROM habit_entries WHERE id = $1",
            [habit_entry_id],
            |row| {
                Ok(HabitEntry {
                    id: row.get("id")?,
                    habit_id: row.get("habit_id")?,
                    value: row.get("value")?,
                    completion_date: row.get("completion_date")?,
                    creation_timestamp: row.get("creation_timestamp")?,
                })
            },
        )?;

        conn.execute("DELETE FROM habit_entries WHERE id = $1", [habit_entry_id])?;

        Ok(habit_entry)
    }

    pub fn get_all_habit_entries(&self, habit_id: i64) -> Result<Vec<HabitEntry>, Error> {
        let conn = self.connection.lock().unwrap();

        let mut stmt = conn.prepare("SELECT * FROM habit_entries WHERE habit_id = $1")?;
        let habit_entry_iter = stmt.query_map([habit_id], |row| {
            Ok(HabitEntry {
                id: row.get("id")?,
                habit_id: row.get("habit_id")?,
                value: row.get("value")?,
                completion_date: row.get("completion_date")?,
                creation_timestamp: row.get("creation_timestamp")?,
            })
        })?;

        let mut habit_entries = Vec::new();
        for habit_entry in habit_entry_iter {
            habit_entries.push(habit_entry?);
        }

        Ok(habit_entries)
    }

    pub fn get_all_habits_with_entries(&self) -> Result<Vec<HabitWithEntries>, Error> {
        let mut habits_with_entries = Vec::new();
        let habits = self.get_all_habits()?;
        for habit in habits {
            let entries = self.get_all_habit_entries(habit.id)?;
            habits_with_entries.push(HabitWithEntries { habit, entries });
        }

        Ok(habits_with_entries)
    }
}
